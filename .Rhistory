path <- "/Users/dsuolang/Desktop/Study2/Data/synthpop.dta"
dat <- haven::read_dta(path)
colnamea(synthpop)
colnames(synthpop)
path <- "/Users/dsuolang/Desktop/Study2/Data/synthpop.dta"
synthpop <- haven::read_dta(path)
colnames(synthpop)
mean(synthpop$bmi
)
se(synthpop$bmi
)
synthpop$race
gc()
library(haven)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyverse)
#library(devtools)
library(foreign)
library(nnet)
library(pscl)
library(doParallel)
library(readr)
library(stringr)
library(fastDummies)
library(vcd)
library(magrittr)
library(mice)
library(caret)
library(pscl)
library(clustMixType)
library(pROC)
options(scipen = 999)
path <- "/Users/dsuolang/Desktop/Study2/Data/synthpop.dta"
synthpop <- haven::read_dta(path)
colnames(synthpop)
library(haven)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyverse)
#library(devtools)
library(foreign)
library(nnet)
library(pscl)
library(doParallel)
library(readr)
library(stringr)
library(fastDummies)
library(vcd)
library(magrittr)
library(mice)
library(caret)
library(pscl)
library(clustMixType)
library(pROC)
options(scipen = 999)
path <- "/Users/dsuolang/Desktop/Study2/Data/synthpop.dta"
synthpop <- haven::read_dta(path)
# Continuous variables
cont_vars <- c("age", "bmi", "mvpa_total_acc",
"modpa_total", "vigpa_total")
# Categorical variables
cat_vars <- c("race","gender","marital","edu","poverty","work","insurance",
"self_reported_health","smoker","alcohol_cat",
"hypertension","diabetes","heartdiseases","cancers","stroke",
"fitness_access","health_literacy","activity_pattern")
# --- Continuous summaries ---
cont_summary <- dat %>%
select(all_of(cont_vars)) %>%
summarise(across(
everything(),
~ c(mean = mean(.x, na.rm = TRUE),
se   = sd(.x, na.rm = TRUE)/sqrt(sum(!is.na(.x))))
)) %>%
pivot_longer(cols = everything(),
names_to = c("variable", ".value"),
names_sep = "_")
# --- Continuous summaries ---
cont_summary <- synthpop %>%
select(all_of(cont_vars)) %>%
summarise(across(
everything(),
~ c(mean = mean(.x, na.rm = TRUE),
se   = sd(.x, na.rm = TRUE)/sqrt(sum(!is.na(.x))))
)) %>%
pivot_longer(cols = everything(),
names_to = c("variable", ".value"),
names_sep = "_")
# --- Categorical summaries ---
n_total <- nrow(synthpop)
cat_summary <- synthpop %>%
select(all_of(cat_vars)) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "level") %>%
filter(!is.na(level)) %>%
group_by(variable, level) %>%
summarise(prop = n()/n_total, .groups = "drop") %>%
mutate(se = sqrt(prop * (1 - prop) / n_total))
n_total <- nrow(dat)
# --- Categorical summaries ---
n_total <- nrow(synthpop)
cat_summary <- synthpop %>%
select(all_of(cat_vars)) %>%
mutate(across(everything(), as.character)) %>%   # <-- ensure same type
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "level") %>%
filter(!is.na(level)) %>%
group_by(variable, level) %>%
summarise(prop = n()/n_total, .groups = "drop") %>%
mutate(se = sqrt(prop * (1 - prop) / n_total))
# --- Final results ---
list(
continuous = cont_summary,
categorical = cat_summary
)
library(ggplot2)
library(gridExtra)
library(grid)
library(cowplot)
library(dplyr)
library(forcats)
library(scales)
library(stringr)
library(tidyr)
library(ggh4x)
srmi<- read.csv('/Users/dsuolang/Downloads/result_sheet_srmi.csv')
srmi$method = 'REG'
pmm <- read.csv('/Users/dsuolang/Downloads/result_sheet_pmm.csv')
pmm<-pmm[pmm$model_spec=="w/o_Transf",]
pmm$method = 'PMM'
srmi_pmm<-rbind(srmi, pmm)
datasets <- list(
srmi_pmm[srmi_pmm$variable == "mvpa_total_acc", ],
srmi_pmm[srmi_pmm$variable == "activity_pattern_1", ],
srmi_pmm[srmi_pmm$variable == "activity_pattern_2", ],
srmi_pmm[srmi_pmm$variable == "activity_pattern_3", ],
srmi_pmm[srmi_pmm$variable == "activity_pattern_4", ]
)
titles <- c("MVPA Duration (Sensor)",
"Activity Pattern 1", "Activity Pattern 2",
"Activity Pattern 3", "Activity Pattern 4")
# Part 1. Rel_Bias SE RMSE for MVPA
# Function to create plots for a given dataset
create_plots <- function(data, title_text) {
palette <- scale_color_manual(values = c("lightblue", "blue", "darkblue", "peachpuff", "orange", "orange3"))
# Plot 1: Relative Bias
p1 <- ggplot(data, aes(x = miss_rate, y = relative_bias, color = interaction(shared_var, method),
linetype = model_spec, shape = interaction(shared_var, method))) +
geom_line() +
geom_point(size = 3) +
labs(x = "", y = "Rel.Bias") +
scale_x_continuous(breaks = unique(data$miss_rate)) +
#scale_y_continuous(limits = c(-0.1, 0.3),breaks = c(-0.1, 0, 0.1, 0.2, 0.3), , labels = number_format(accuracy = 0.01)) +
scale_y_continuous(labels = number_format(accuracy = 0.01)) +  # Format y-axis to two decimals
scale_shape_manual(values = c(
"Least.REG" = 16, "Moderate.REG" = 16, "Most.REG" = 16,
"Least.PMM" = 17, "Moderate.PMM" = 17, "Most.PMM" = 17))+
scale_linetype_manual(values = c("w/o_Transf" = "solid", "w/_Transf" = "dashed")) +
palette +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 12),  # Increase x-axis label size
axis.title.y = element_text(size = 12),  # Increase y-axis label size
axis.text.x = element_text(size = 12),   # Increase x-axis tick label size
axis.text.y = element_text(size = 12),   # Increase y-axis tick label size
strip.text = element_text(size = 12)) +
facet_wrap(~ miss_mech)
# Plot 2: Standard Error
p2 <- ggplot(data, aes(x = miss_rate, y = se, color = interaction(shared_var, method),
linetype = model_spec, shape = interaction(shared_var, method))) +
geom_line() +
geom_point(size = 3) +
labs(x = "Missing Rate", y = "SE") +
scale_x_continuous(breaks = unique(data$miss_rate)) +
#scale_y_continuous(breaks = c(0.65, 0.70, 0.75)) +
scale_shape_manual(values = c(
"Least.REG" = 16, "Moderate.REG" = 16, "Most.REG" = 16,
"Least.PMM" = 17, "Moderate.PMM" = 17, "Most.PMM" = 17)) +
scale_linetype_manual(values = c("w/o_Transf" = "solid", "w/_Transf" = "dashed")) +
palette +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 12),  # Increase x-axis label size
axis.title.y = element_text(size = 12),  # Increase y-axis label size
axis.text.x = element_text(size = 12),   # Increase x-axis tick label size
axis.text.y = element_text(size = 12),   # Increase y-axis tick label size
strip.text = element_text(size = 12)) +
facet_wrap(~ miss_mech) + coord_cartesian(ylim = c(0,30)) #+ coord_cartesian(ylim = c(0.65, 0.75))  coord_cartesian(ylim = c(0,30))  # Set y-axis limit
# Plot 3: RMSE
p3 <- ggplot(data, aes(x = miss_rate, y = rmse, color = interaction(shared_var, method),
linetype = model_spec, shape = interaction(shared_var, method))) +
geom_line() +
geom_point(size = 3) +
labs(x = "", y = "RMSE") +
scale_x_continuous(breaks = unique(data$miss_rate)) +
#scale_y_continuous(breaks = c(0.65, 0.70, 0.75)) +
scale_shape_manual(values = c(
"Least.REG" = 16, "Moderate.REG" = 16, "Most.REG" = 16,
"Least.PMM" = 17, "Moderate.PMM" = 17, "Most.PMM" = 17)) +
scale_linetype_manual(values = c("w/o_Transf" = "solid", "w/_Transf" = "dashed")) +
palette +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 12),  # Increase x-axis label size
axis.title.y = element_text(size = 12),  # Increase y-axis label size
axis.text.x = element_text(size = 12),   # Increase x-axis tick label size
axis.text.y = element_text(size = 12),   # Increase y-axis tick label size
strip.text = element_text(size = 12)) +
facet_wrap(~ miss_mech) + coord_cartesian(ylim = c(0,60)) #+ coord_cartesian(ylim = c(0.65, 0.75))  # Set y-axis limit
# Legend
legend_plot <- get_legend(p1 + theme(legend.position = "right", legend.title = element_blank(),
legend.text = element_text(size = 10)))
# Combine Plots
final_plot <- plot_grid(
plot_grid(p1, p2, p3, ncol = 3),
legend_plot,
ncol = 2, rel_widths = c(3, 0.4))
# Add Title
title <- ggdraw() + draw_label(title_text, fontface = 'bold', size = 12)
plot_grid(title, final_plot, ncol = 1, rel_heights = c(0.1, 1))
}
# List of datasets and titles
datasets <- datasets
titles <- titles
# Generate and display plots
plots <- lapply(1:length(datasets), function(i) create_plots(datasets[[i]], titles[i]))
plots[[1]]
# Part 2. Bias,SE for activity pattern
# Function to create plots for a given dataset
create_plots2 <- function(data, title_text) {
palette <- scale_color_manual(values = c("lightblue", "blue", "darkblue", "peachpuff", "orange", "orange3"))
# Plot 1: Relative Bias
p1 <- ggplot(data, aes(x = miss_rate, y = bias, color = interaction(shared_var, method),
linetype = model_spec, shape = interaction(shared_var, method))) +
geom_line() +
geom_point(size = 3) +
labs(x = "Missing Rate", y = "Bias") +
scale_x_continuous(breaks = unique(data$miss_rate)) +
scale_y_continuous(labels = number_format(accuracy = 0.01)) +  # Format y-axis to two decimals
scale_shape_manual(values = c(
"Least.REG" = 16, "Moderate.REG" = 16, "Most.REG" = 16,
"Least.PMM" = 17, "Moderate.PMM" = 17, "Most.PMM" = 17))+
scale_linetype_manual(values = c("w/o_Transf" = "solid", "w/_Transf" = "dashed")) +
palette +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 12),  # Increase x-axis label size
axis.title.y = element_text(size = 12),  # Increase y-axis label size
axis.text.x = element_text(size = 12),   # Increase x-axis tick label size
axis.text.y = element_text(size = 12),   # Increase y-axis tick label size
strip.text = element_text(size = 12)) +
facet_wrap(~ miss_mech)
# Plot 2: Standard Error
p2 <- ggplot(data, aes(x = miss_rate, y = se, color = interaction(shared_var, method),
linetype = model_spec, shape = interaction(shared_var, method))) +
geom_line() +
geom_point(size = 3) +
labs(x = "Missing Rate", y = "SE") +
scale_x_continuous(breaks = unique(data$miss_rate)) +
scale_y_continuous(labels = number_format(accuracy = 0.01)) +  # Format y-axis to two decimals
scale_shape_manual(values = c(
"Least.REG" = 16, "Moderate.REG" = 16, "Most.REG" = 16,
"Least.PMM" = 17, "Moderate.PMM" = 17, "Most.PMM" = 17)) +
scale_linetype_manual(values = c("w/o_Transf" = "solid", "w/_Transf" = "dashed")) +
palette +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 12),  # Increase x-axis label size
axis.title.y = element_text(size = 12),  # Increase y-axis label size
axis.text.x = element_text(size = 12),   # Increase x-axis tick label size
axis.text.y = element_text(size = 12),   # Increase y-axis tick label size
strip.text = element_text(size = 12)) +
facet_wrap(~ miss_mech) + coord_cartesian(ylim = c(0.65, 0.75))  # Set y-axis limit
# Legend
legend_plot <- get_legend(p1 + theme(legend.position = "right", legend.title = element_blank(),
legend.text = element_text(size = 10)))
# Combine Plots
final_plot <- plot_grid(
plot_grid(p1, p2, ncol = 2),
#legend_plot,
ncol = 2, rel_widths = c(3, 0.4))
# Add Title
title <- ggdraw() + draw_label(title_text, fontface = 'bold', size = 12)
plot_grid(title, final_plot, ncol = 1, rel_heights = c(0.1, 1))
}
# List of datasets and titles
datasets <- datasets
titles <- titles
# Generate and display plots
plots <- lapply(2:length(datasets), function(i) create_plots2(datasets[[i]], titles[i]))
# plots 1050 55
do.call(grid.arrange, c(plots[1:4], nrow = 2, ncol = 2))
# grid.arrange(arrangeGrob(grobs = plots[1:4], ncol = 2),nrow = 2,heights = c(10, 1))
# 1300 * 750
# Part 3 : FMI
plot_fmi <- function(data, title_text) {
palette <- scale_color_manual(values = c("orange3", "orange3", "orange3", "darkblue", "darkblue", "darkblue"))
# Create a new x_label column without breaking the text into separate lines
data$x_label <- paste(data$shared_var, data$miss_rate, sep = " ")  # Concatenate shared_var and miss_rate
desired_order <- rev(c(
"Least 50", "Moderate 50", "Most 50",
"Least 70", "Moderate 70", "Most 70",
"Least 90", "Moderate 90", "Most 90"
))
data$group_label <- interaction(data$miss_mech, data$method, data$model_spec, sep = ".")
desired_legend_order <- c(
"MAR.PMM.w/o_Transf",
"MAR.REG.w/o_Transf",
"MAR.REG.w/_Transf",
"MNAR.PMM.w/o_Transf",
"MNAR.REG.w/o_Transf",
"MNAR.REG.w/_Transf"
)
# Set factor level order
data$group_label <- factor(data$group_label, levels = desired_legend_order)
# Step 3: Convert to factor with the desired order
data$x_label <- factor(data$x_label, levels = desired_order)
ggplot(data, aes(
x = lambda,  # X-axis is now lambda (FMI)
y = x_label,
shape = group_label,
color = group_label
)) +
scale_x_continuous(labels = number_format(accuracy = 0.1),
limits = c(min(data$lambda) - 0.1, max(data$lambda) + 0.1),
breaks = c(0.2, 0.4, 0.6, 0.8, 1)) +  # Shift X-Axis slightly
scale_y_discrete(expand = c(0.05, 0.05)) +  # Shift Y-Axis slightly
geom_point(size = 4) +
labs(
x = "FMI (Lambda)",  # Label for x-axis
y = "Shared Variables * %Missing",  # Label for y-axis
title = title_text
) +
palette +
theme_minimal() +
theme(
axis.title.x = element_text(size = 12),  # Increase x-axis label size
axis.title.y = element_text(size = 12),  # Increase y-axis label size
axis.text.x = element_text(size = 12),   # Increase x-axis tick label size
axis.text.y = element_text(size = 12),   # Increase y-axis tick label size
strip.text = element_text(size = 12),
legend.position = "none",
strip.background = element_blank(),
plot.title = element_text(hjust = 0.45, size = 12, face = "bold"),
axis.line = element_line(color = "black", linewidth = 0.1)
) +
scale_shape_manual(values = c(16, 17, 1, 16, 17, 1))
}
# List of datasets and titles
datasets <- datasets
df<-datasets[[1]]
# Generate `p4` plots for each dataset
fmi_plot_mvpa <- plot_fmi(df,"MVPA Duration (Sensor)")
fmi_plot_mvpa
combiend_dataset2_5<-as.data.frame(cbind(
(datasets[[2]] %>% arrange(scenario))$lambda,
(datasets[[3]] %>% arrange(scenario))$lambda,
(datasets[[4]] %>% arrange(scenario))$lambda,
(datasets[[5]] %>% arrange(scenario))$lambda))
lambda<-rowMeans(combiend_dataset2_5)
df$lambda2<-rowMeans(combiend_dataset2_5)
fmi_plot_activity_pattern <- plot_fmi(df, "Activity Pattern")
fmi_plot_activity_pattern
plot_cr <- function(data, title_text, hline) {
palette <- scale_color_manual(values = c("orange2", "orange2", "orange2", "lightblue3", "lightblue3", "lightblue3"))
# Create a new x_label column with a newline between miss_rate and shared_var
data$x_label <- str_replace_all(interaction(data$miss_rate, data$shared_var), "\\.", "\n")
ggplot(data, aes(
y = coverage,
x = fct_reorder(data$x_label, data$miss_rate),
shape = fct_reorder(interaction(miss_mech, method, model_spec), miss_mech),
color = fct_reorder(interaction(miss_mech, method, model_spec), miss_mech)
)) +
geom_point(size = 4) +
geom_hline(yintercept = hline, linetype = "solid", color = "red", linewidth = 0.5) +  # Horizontal line at hline
labs(
x = "Missing Rate and Model",
y = "Coverage",
title = title_text
) +
palette +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 12),  # Increase x-axis label size
axis.title.y = element_text(size = 12),  # Increase y-axis label size
axis.text.x = element_text(size = 12),   # Increase x-axis tick label size
axis.text.y = element_text(size = 12),   # Increase y-axis tick label size
strip.text = element_text(size = 12)) +
scale_shape_manual(values = c(16, 17, 1, 16, 17, 1)) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),  # Format y-axis as percentages
limits = c(0, 1)  # Ensure the y-axis ends at 100%
) +
theme(
legend.position = "none",
strip.background = element_blank(),
plot.title = element_text(hjust = 0.45, size = 12, face = "bold"),
axis.line = element_line(color = "black", linewidth = 0.1)
)
}
# List of datasets and titles
datasets <- datasets
titles <- titles
hlines <- c(0.96, 0.94, 0.94, 0.95, 0.95)
# Generate `p4` plots for each dataset
p5_plots <- lapply(1:length(datasets), function(i) plot_cr(datasets[[i]], titles[i], hlines[i]))
# Extract legend from the first plot
legend_plot <- get_legend(
plot_cr(datasets[[1]], "", hlines[1]) + theme(legend.position = "right", legend.title = element_blank(),
legend.text = element_text(size = 12)))
final_plot <- plot_grid(
plot_grid(plotlist = p5_plots, legend_plot, ncol = 2) # Arrange plots in two columns                      # Add the shared legend        # Adjust the relative widths
)
# Display the combined plot
final_plot
